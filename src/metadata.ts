/* eslint-disable */
export default async () => {
    const t = {
        ["./common/response/dtos/response.dto"]: await import("./common/response/dtos/response.dto"),
        ["./common/pagination/enums/pagination.enum"]: await import("./common/pagination/enums/pagination.enum"),
        ["./common/response/decorators/response.paging.dto"]: await import("./common/response/decorators/response.paging.dto"),
        ["./modules/app/enums/app.enum"]: await import("./modules/app/enums/app.enum")
    };
    return { "@nestjs/swagger": { "models": [[import("./common/response/dtos/response.dto"), { "ResponseMetadataDto": { language: { required: true, type: () => String }, timestamp: { required: true, type: () => Number }, timezone: { required: true, type: () => String }, path: { required: true, type: () => String }, version: { required: true, type: () => String }, repoVersion: { required: true, type: () => String } }, "ResponseDto": { statusCode: { required: true, type: () => Number }, message: { required: true, type: () => String }, _metadata: { required: true, type: () => t["./common/response/dtos/response.dto"].ResponseMetadataDto } } }], [import("./common/response/decorators/response.paging.dto"), { "ResponsePagingMetadataPaginationRequestDto": { search: { required: true, type: () => String }, filters: { required: true, type: () => Object }, page: { required: true, type: () => Number }, perPage: { required: true, type: () => Number }, orderBy: { required: true, type: () => String }, orderDirection: { required: true, enum: t["./common/pagination/enums/pagination.enum"].ENUM_PAGINATION_ORDER_DIRECTION_TYPE }, availableSearch: { required: true, type: () => [String] }, availableOrderBy: { required: true, type: () => [String] }, availableOrderDirection: { required: true, enum: t["./common/pagination/enums/pagination.enum"].ENUM_PAGINATION_ORDER_DIRECTION_TYPE, isArray: true }, total: { required: false, type: () => Number }, totalPage: { required: false, type: () => Number } }, "ResponsePagingMetadataDto": { pagination: { required: false, type: () => t["./common/response/decorators/response.paging.dto"].ResponsePagingMetadataPaginationRequestDto } }, "ResponsePagingDto": { _metadata: { required: true, type: () => t["./common/response/decorators/response.paging.dto"].ResponsePagingMetadataDto }, data: { required: true, type: () => [Object] } } }], [import("./modules/app/dtos/app.env.dto"), { "AppEnvDto": { APP_NAME: { required: true, type: () => String, minLength: 1 }, APP_ENV: { required: true, enum: t["./modules/app/enums/app.enum"].ENUM_APP_ENVIRONMENT, minLength: 1 }, APP_TIMEZONE: { required: true, type: () => String, enum: t["./modules/app/enums/app.enum"].ENUM_APP_TIMEZONE }, HOME_NAME: { required: true, type: () => String }, HOME_URL: { required: true, type: () => String, format: "uri" }, HTTP_HOST: { required: true, type: () => String, minLength: 1 }, HTTP_PORT: { required: true, type: () => Number }, DEBUG_ENABLE: { required: true, type: () => Boolean }, DEBUG_LEVEL: { required: true, type: () => String, minLength: 1 }, MIDDLEWARE_CORS_ORIGIN: { required: true, type: () => String, minLength: 1 }, URL_VERSIONING_ENABLE: { required: true, type: () => Boolean }, URL_VERSION: { required: true, type: () => Number }, DATABASE_DEBUG: { required: true, type: () => Boolean }, AUTH_JWT_AUDIENCE: { required: true, type: () => String, minLength: 1 }, AUTH_JWT_ISSUER: { required: true, type: () => String, minLength: 1 }, AUTH_JWT_ACCESS_TOKEN_EXPIRED: { required: true, type: () => String, minLength: 1 }, AUTH_JWT_ACCESS_TOKEN_SECRET_KEY: { required: true, type: () => String, minLength: 1 }, AUTH_JWT_REFRESH_TOKEN_EXPIRED: { required: true, type: () => String, minLength: 1 }, AUTH_JWT_REFRESH_TOKEN_SECRET_KEY: { required: true, type: () => String, minLength: 1 } } }], [import("./modules/balance-change-request/infrastructure/persistence/typeorm/entities/balance-change-requests.entity"), { "BalanceChangeRequestEntity": { userId: { required: true, type: () => String }, type: { required: true, type: () => String }, status: { required: true, type: () => String }, amountValue: { required: true, type: () => Number }, amountCurrency: { required: true, type: () => String }, method: { required: true, type: () => String }, remarks: { required: false, type: () => String }, approvedAt: { required: false, type: () => Date }, rejectedAt: { required: false, type: () => Date }, processedAt: { required: false, type: () => Date }, reason: { required: false, type: () => String } } }]], "controllers": [] } };
};